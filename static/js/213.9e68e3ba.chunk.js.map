{"version":3,"file":"static/js/213.9e68e3ba.chunk.js","mappings":"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","sources":["components/SearchForm.jsx","Pages/Movies.js","Services/Api.js","Services/Api-key.js","components/ErrorOccurred.jsx","components/MovieListItem.jsx","components/MoviesList.jsx"],"sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function SearchForm({ formSubmit, errorMessage }) {\n  const [query, setQuery] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (query === '') {\n      errorMessage();\n      return;\n    }\n\n    formSubmit(query);\n    setQuery('');\n  };\n\n  const handleInput = e => {\n    setQuery(e.target.value.toLowerCase().trim());\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          autoFocus\n          value={query}\n          onChange={handleInput}\n          autoComplete=\"off\"\n          placeholder=\"find a movie\"\n        />\n        <button type=\"submit\"></button>\n      </form>\n    </div>\n  );\n}\n\nSearchForm.propTypes = {\n  formSubmit: PropTypes.func.isRequired,\n  errorMessage: PropTypes.func.isRequired,\n};\n","import ErrorMessageToUser from 'components/ErrorOccurred';\nimport Loader from 'components/Loader';\nimport MoviesList from 'components/MoviesList';\nimport SearchForm from 'components/SearchForm';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMovies } from 'Services/Api';\n\nconst STATUS = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  REJECTED: 'rejected',\n  RESOLVED: 'resolved',\n};\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(STATUS.IDLE);\n\n  useEffect(() => {\n    const currentQuery = searchParams.get('query');\n\n    const searchMovieId = async () => {\n      if (!currentQuery) return;\n      setStatus(STATUS.PENDING);\n\n      try {\n        const data = await searchMovies(currentQuery);\n        setMovies(data);\n        setStatus(STATUS.RESOLVED);\n        setError('');\n\n        if (data.length === 0) {\n          setMovies([]);\n          setError(\"Movie don't find.\");\n          setStatus(STATUS.REJECTED);\n          return;\n        }\n      } catch (error) {\n        setStatus(STATUS.REJECTED);\n        setError(error.message);\n      }\n    };\n    searchMovieId();\n  }, [searchParams]);\n\n  const formSubmit = value => {\n    setSearchParams({ query: value });\n  };\n\n  const formErrorMessage = () => {\n    setError(\"You didn't enter anything! Try again in English!\");\n    setMovies([]);\n    setStatus(STATUS.REJECTED);\n  };\n\n  return (\n    <div>\n      <SearchForm formSubmit={formSubmit} errorMessage={formErrorMessage} />\n\n      {status === STATUS.REJECTED && <ErrorMessageToUser message={error} />}\n      {status === STATUS.RESOLVED && <MoviesList movies={movies} />}\n      {status === STATUS.PENDING && <Loader />}\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nimport { API_KEY, BASE_URL } from './Api-key';\n// https://api.themoviedb.org/3/movie/550?api_key=839ee1ac45e2249141bd738796b376ad пример исп-я\n\n// https://drive.google.com/file/d/1vR0hi3n1236Q5Bg4-se-8JVKD9UKSfId/view    ссылка на превью ДЗ\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n  adult: false,\n  language: 'en-US',\n};\n\n// ! ====== for component Home popular movies ======\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get('/trending/movie/day');\n\n  return data.results;\n};\n\n// ! ====== for component Movies search movies ======\nexport const searchMovies = async (query, page = 1) => {\n  const { data } = await axios.get(`/search/movie?query=${query}&page=${page}`);\n\n  return data.results;\n};\n\n// ! ====== for details info about movie ======\nexport const getMovieDetails = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}`);\n\n  return data;\n};\n\n// ! ====== get info about the cast of movie ======\nexport const getMovieCredits = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/credits`);\n\n  return data;\n};\n\n// ! ====== get info about the rewiews of movie ======\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`);\n\n  return data;\n};\n","const API_KEY = '839ee1ac45e2249141bd738796b376ad';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport { API_KEY, BASE_URL };\n","import PropTypes from 'prop-types';\n\nexport default function ErrorMessageToUser({ message }) {\n  return (\n    <div>\n      <p>{message}</p>\n    </div>\n  );\n}\n\nErrorMessageToUser.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieListItem = ({ id, title, poster }) => {\n  const location = useLocation();\n\n  return (\n    <li>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        <div>\n          <img\n            src={\n              poster\n                ? `https://image.tmdb.org/t/p/w500${poster}`\n                : `https://upload.wikimedia.org/wikipedia/commons/thumb/f/f9/No-image-available.jpg/640px-No-image-available.jpg`\n            }\n            alt=\"{title}\"\n          />\n        </div>\n        <h2>{title ? title : 'No tittle'}</h2>\n      </Link>\n    </li>\n  );\n};\nexport default MovieListItem;\n\nMovieListItem.propTypes = {\n  title: PropTypes.string,\n  id: PropTypes.number,\n  poster: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport MovieListItem from './MovieListItem';\n\nconst MoviesList = ({ movies }) => {\n  return (\n    <ul>\n      {movies.map(({ id, title, poster_path }) => {\n        return (\n          <MovieListItem key={id} id={id} title={title} poster={poster_path} />\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n"],"names":["SearchForm","formSubmit","errorMessage","useState","query","setQuery","onSubmit","e","preventDefault","type","name","autoFocus","value","onChange","target","toLowerCase","trim","autoComplete","placeholder","STATUS","movies","setMovies","useSearchParams","searchParams","setSearchParams","error","setError","status","setStatus","useEffect","currentQuery","get","searchMovieId","searchMovies","data","length","message","MoviesList","Loader","axios","api_key","adult","language","getTrendingMovies","results","page","getMovieDetails","movieId","getMovieCredits","getMovieReviews","ErrorMessageToUser","id","title","poster","location","useLocation","to","state","from","src","alt","map","poster_path"],"sourceRoot":""}